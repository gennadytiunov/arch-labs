{
	"info": {
		"_postman_id": "2381d4f2-3eb5-4a75-a022-070c0b5e113f",
		"name": "Saga",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Bookings - Get Shows",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/shows",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"shows"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Show Sessions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/show-sessions/1",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"show-sessions",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Available Seats - Failure (Show not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check show not found - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.have.body(\"Show '0' not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/seats/0/2021-01-01T10:00:00",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"seats",
						"0",
						"2021-01-01T10:00:00"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Available Seats - Failure (Session not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check show not found - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.have.body(\"Session '01.01.2021 10:00:00' not found for show '1'.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/seats/1/2021-01-01T10:00:00",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"seats",
						"1",
						"2021-01-01T10:00:00"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Available Seats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check show not found - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.have.body(\"Session '01.01.2021 10:00:00' not found for show '1'.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/seats/1/2021-06-06T18:00:00",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"seats",
						"1",
						"2021-06-06T18:00:00"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get All Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/bookings",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Get All Users - Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check no users exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{UserEndpoint}}/users",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{UserEndpoint}}",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get All Payment Accounts - Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check no payment accounts exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{PaymentEndpoint}}/accounts",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{PaymentEndpoint}}",
					"path": [
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notifications - Get All Notifications - Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check no notifications exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{NotificationEndpoint}}/notifications",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{NotificationEndpoint}}",
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Add User - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created - Status code is 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eq(pm.collectionVariables.get(\"email\"));\r",
							"    pm.expect(jsonData.password).to.eq(pm.collectionVariables.get(\"password\"));\r",
							"    pm.expect(jsonData.firstName).to.eq(pm.collectionVariables.get(\"firstName\"));\r",
							"    pm.expect(jsonData.lastName).to.eq(pm.collectionVariables.get(\"lastName\"));\r",
							"\r",
							"    pm.collectionVariables.set(\"userId\", jsonData.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));\r",
							"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));\r",
							"pm.collectionVariables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Service-Token",
						"type": "text",
						"value": "9860c9cd-5101-455f-85ca-0916908ee464"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}:{{UserEndpoint}}/users",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{UserEndpoint}}",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get Payment Account by Id - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment account found - Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userId).to.eq(pm.collectionVariables.get(\"userId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{PaymentEndpoint}}/accounts/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{PaymentEndpoint}}",
					"path": [
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get User Bookings - Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check no user bookings exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/user-bookings/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"user-bookings",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get UserTransactions - Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check no user transactions exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{PaymentEndpoint}}/transactions/user/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{PaymentEndpoint}}",
					"path": [
						"transactions",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Deposit Amount (1000 RUB) - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Deposit amount - Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": 1000,\r\n    \"currency\": \"RUB\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}:{{PaymentEndpoint}}/deposit/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{PaymentEndpoint}}",
					"path": [
						"deposit",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get UserTransactions - Exists One",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check one user transaction exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{PaymentEndpoint}}/transactions/user/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{PaymentEndpoint}}",
					"path": [
						"transactions",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Make First Booking (3000 RUB) - Failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Make booking - Status code is 201 (OK)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"bookingId\", pm.variables.replaceIn('{{$guid}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Service-Token",
						"type": "text",
						"value": "9860c9cd-5101-455f-85ca-0916908ee464"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{bookingId}}\",\r\n    \"showId\": 1,\r\n    \"sessionDate\": \"2021-06-06T18:00:00\",\r\n    \"seats\": [\r\n        { \"row\": 1, \"number\": 1 },\r\n        { \"row\": 1, \"number\": 2 }\r\n    ],\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/user-bookings/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"user-bookings",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Deposit Amount (5000 RUB) - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Deposit amount - Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": 5000,\r\n    \"currency\": \"RUB\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}:{{PaymentEndpoint}}/deposit/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{PaymentEndpoint}}",
					"path": [
						"deposit",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Make Second Booking (3000 RUB) - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Make booking - Status code is 201 (OK)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"bookingId\", pm.variables.replaceIn('{{$guid}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Service-Token",
						"type": "text",
						"value": "9860c9cd-5101-455f-85ca-0916908ee464"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{bookingId}}\",\r\n    \"showId\": 1,\r\n    \"sessionDate\": \"2021-06-06T18:00:00\",\r\n    \"seats\": [\r\n        { \"row\": 1, \"number\": 1 },\r\n        { \"row\": 1, \"number\": 2 }\r\n    ],\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/user-bookings/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"user-bookings",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get User Bookings - Exists One",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check one user booking exists - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/bookings/user/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"bookings",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get User Transactions - Exist Two",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check two user transactions exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{PaymentEndpoint}}/transactions/user/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{PaymentEndpoint}}",
						"transactions",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Check Account Balance - Changed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance - Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.balance).to.eq(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/{{PaymentEndpoint}}/accounts/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{PaymentEndpoint}}",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Make Third Booking (3000 RUB)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Make second booking - Status code is 201 (OK)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Service-Token",
						"type": "text",
						"value": "9860c9cd-5101-455f-85ca-0916908ee464"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{bookingId}}\",\r\n    \"showId\": 1,\r\n    \"sessionDate\": \"2021-06-06T18:00:00\",\r\n    \"seats\": [\r\n        { \"row\": 1, \"number\": 1 },\r\n        { \"row\": 1, \"number\": 2 }\r\n    ],\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/{{BookingEndpoint}}/bookings",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"{{BookingEndpoint}}",
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get User Bookings - Exist Two",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check two user bookings exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{BookingEndpoint}}/bookings/user/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{BookingEndpoint}}",
					"path": [
						"bookings",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get User Transactions - Exist Two",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check two user transactions exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{PaymentEndpoint}}/transactions/user/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{PaymentEndpoint}}",
					"path": [
						"transactions",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Check Account Balance - Unchanged",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance unchaged - Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.balance).to.eq(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{PaymentEndpoint}}/accounts/{{userId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{PaymentEndpoint}}",
					"path": [
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notifications - Check Notifications - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance - Status code is 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(2);\r",
							"\r",
							"    var firstNotification = jsonData[0];\r",
							"    pm.expect(firstNotification.emailTo).to.eq(pm.collectionVariables.get(\"email\"));\r",
							"    pm.expect(firstNotification.subject).to.eq(\"Circus - Booking Succeeded\");\r",
							"    \r",
							"    var firstNotification = jsonData[1];\r",
							"    pm.expect(firstNotification.emailTo).to.eq(pm.collectionVariables.get(\"email\"));\r",
							"    pm.expect(firstNotification.subject).to.eq(\"Circus - Booking Failed\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}:{{NotificationEndpoint}}/notifications",
					"host": [
						"{{BaseUrl}}"
					],
					"port": "{{NotificationEndpoint}}",
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "757b0188-99bc-4e95-b26d-5d575a935c0b",
			"key": "BaseUrl",
			"value": "http://localhost"
		},
		{
			"id": "6150636a-46b4-423d-b7cf-ebff0b4b7a25",
			"key": "UserEndpoint",
			"value": "10000"
		},
		{
			"id": "ebf86f81-1df9-4409-867a-1f6ae4f39a29",
			"key": "BookingEndpoint",
			"value": "10100"
		},
		{
			"id": "4d45ee35-93f3-4b10-b8c8-0dd44a4518c1",
			"key": "PaymentEndpoint",
			"value": "10200"
		},
		{
			"id": "be43864a-8195-47bf-9a0d-852519387c45",
			"key": "NotificationEndpoint",
			"value": "10300"
		},
		{
			"id": "9e8d87a7-1978-4113-b748-f87f436c5ad4",
			"key": "email",
			"value": ""
		},
		{
			"id": "744083af-6076-41fd-9522-c2c5a0b64af5",
			"key": "firstName",
			"value": ""
		},
		{
			"id": "8662c440-ad3d-4705-b010-20921e43c629",
			"key": "lastName",
			"value": ""
		},
		{
			"id": "ff7f78c8-5a1d-4375-8a4a-c76a044840ba",
			"key": "password",
			"value": ""
		},
		{
			"id": "b48fdf8b-f07f-4707-b6fd-0ba0e00fdd43",
			"key": "userId",
			"value": ""
		},
		{
			"id": "b47b1b85-fed6-4e43-86c9-576cebe19a0a",
			"key": "bookingId",
			"value": ""
		}
	]
}