{
	"info": {
		"_postman_id": "8bce3aa4-74f0-43eb-a8f7-5acfe522f59e",
		"name": "Circus",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Timetable Endpoint Health - OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Timetable Endpoint - OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.text()).contains(\"Hello from TimetableController\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{TimetableEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{TimetableEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings Endpoint Health - OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Booking Endpoint - OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.text()).contains(\"Hello from BookingsController\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment Endpoint Health - OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Payment Endpoint - OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.text()).contains(\"Hello from PaymentsController\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Endpoint Health - OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Auth Endpoint - OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.text()).contains(\"Hello from AuthController\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{AuthEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{AuthEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Endpoint Health - OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check User Endpoint - OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.text()).contains(\"Hello from UsersController\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'X-Service-Token', value: pm.collectionVariables.get(\"X-Service-Token-User\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{UserEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{UserEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Endpoint Health - S2S Authorization Failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check User Endpoint - Forbidden (403)\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"    pm.expect(pm.response.text()).contains(\"S2S authorization failed\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{UserEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{UserEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Session Endpoint Health - OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Session Endpoint - OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.text()).contains(\"Hello from SessionsController\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'X-Service-Token', value: pm.collectionVariables.get(\"X-Service-Token-Session\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{SessionEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{SessionEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Session Endpoint Health - S2S Authorization Failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Session Endpoint - Forbidden (403)\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"    pm.expect(pm.response.text()).contains(\"S2S authorization failed\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{SessionEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{SessionEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Identity Endpoint Health - OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Session Endpoint - OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.text()).contains(\"Hello from IdentityController\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'X-Service-Token', value: pm.collectionVariables.get(\"X-Service-Token-Identity\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{IdentityEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{IdentityEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Identity Endpoint Health - S2S Authorization Failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Session Endpoint - Forbidden (403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"    pm.expect(pm.response.text()).contains(\"S2S authorization failed\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{IdentityEndpoint}}/health",
					"host": [
						"{{BaseUrl}}{{IdentityEndpoint}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Up User 1 - Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"email\", \"gennady.tiunov@gmail.com\");\r",
							"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));\r",
							"pm.collectionVariables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sign Up - 201 (Created)\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"email\"));\r",
							"    pm.expect(jsonData.password).to.eql(pm.collectionVariables.get(\"password\"));\r",
							"    pm.expect(jsonData.firstName).to.eql(pm.collectionVariables.get(\"firstName\"));\r",
							"    pm.expect(jsonData.lastName).to.eql(pm.collectionVariables.get(\"lastName\"));\r",
							"\r",
							"    pm.collectionVariables.set(\"id\", jsonData.id);\r",
							"\r",
							"    pm.collectionVariables.set(\"SessionId\", pm.response.headers.get(\"SessionId\"));\r",
							"    pm.collectionVariables.set(\"FirstUserId\", jsonData.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"{{email}}\",\r\n    \"password\" : \"{{password}}\",\r\n    \"firstName\" : \"{{firstName}}\",\r\n    \"lastName\" : \"{{lastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{AuthEndpoint}}/signup",
					"host": [
						"{{BaseUrl}}{{AuthEndpoint}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Out User 1 - Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sign Out - 204 (NoContent)\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"\r",
							"    pm.collectionVariables.set(\"SessionId\", null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{AuthEndpoint}}/signout",
					"host": [
						"{{BaseUrl}}{{AuthEndpoint}}"
					],
					"path": [
						"signout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign Up User 1 - Failure",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sign Up - 409 (Conflict)\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"{{email}}\",\r\n    \"password\" : \"{{password}}\",\r\n    \"firstName\" : \"{{firstName}}\",\r\n    \"lastName\" : \"{{lastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{AuthEndpoint}}/signup",
					"host": [
						"{{BaseUrl}}{{AuthEndpoint}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Timetable - Get Shows - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting shows - several ones returned, OK (200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.gt(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{TimetableEndpoint}}/shows",
					"host": [
						"{{BaseUrl}}{{TimetableEndpoint}}"
					],
					"path": [
						"shows"
					]
				}
			},
			"response": []
		},
		{
			"name": "Timetable - Get Show - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting show - one returned, OK (200)\", function () {\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{TimetableEndpoint}}/shows/1",
					"host": [
						"{{BaseUrl}}{{TimetableEndpoint}}"
					],
					"path": [
						"shows",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Timetable - Get Show Sessions - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting show sessions - several ones returned, OK (200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.gt(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{TimetableEndpoint}}/show-sessions/1",
					"host": [
						"{{BaseUrl}}{{TimetableEndpoint}}"
					],
					"path": [
						"show-sessions",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Available Seats - Failure (Show not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check show not found - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.have.body(\"Show '0' not found.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/seats/0/2021-01-01T10:00:00",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"seats",
						"0",
						"2021-01-01T10:00:00"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Available Seats - Failure (Session not found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check show not found - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.have.body(\"Session '01/01/2021 10:00:00' not found for show '1'.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/seats/1/2021-01-01T10:00:00",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"seats",
						"1",
						"2021-01-01T10:00:00"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Available Seats - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting available seats - 200, not empty list\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    \r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.gt(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/seats/1/2021-06-06T18:00:00",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"seats",
						"1",
						"2021-06-06T18:00:00"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get User Bookings - Sign In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rediirect to Sign In - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.body(\"Please, POST your credentials to sign in.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get Payment Account - Sign In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rediirect to Sign In - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.body(\"Please, POST your credentials to sign in.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-account",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get User Transactions - Sign In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Rediirect to Sign In - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.body(\"Please, POST your credentials to sign in.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-transactions",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign In User 1  - Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 - OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.collectionVariables.set(\"SessionId\", pm.response.headers.get(\"SessionId\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{AuthEndpoint}}/signin",
					"host": [
						"{{BaseUrl}}{{AuthEndpoint}}"
					],
					"path": [
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get User Bookings - Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting user bookings - none returned (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get Payment Account -  Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting user payment paccount - expected one returned (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-account",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get User Transactions - Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Getting user transactions - none returned (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-transactions",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Deposit Amount (1000 RUB) - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Deposit amount - OK (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": 1000,\r\n    \"currency\": \"RUB\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/deposit-amount",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"deposit-amount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Check Balance - 1000 RUB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance - OK (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.balance).to.eq(1000);\r",
							"    pm.expect(jsonData.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-account",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get User Transactions - Deposit Exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check one user transaction exists - OK (200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.length).to.eq(1);\r",
							"\r",
							"    var transaction = jsonData[0];\r",
							"    pm.expect(transaction.type).to.eq(\"Deposit\");\r",
							"    pm.expect(transaction.amount).to.eq(1000);\r",
							"    pm.expect(transaction.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-transactions",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Make 1st Booking (3000 RUB) - Over Budget",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Make booking - OK (201), Booking  Status is Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"status\"]).to.eq(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });\r",
							"pm.collectionVariables.set(\"bookingId\", pm.variables.replaceIn('{{$guid}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{bookingId}}\",\r\n    \"showId\": 1,\r\n    \"sessionDate\": \"2021-06-06T18:00:00\",\r\n    \"seats\": [\r\n        { \"row\": 1, \"number\": 1 },\r\n        { \"row\": 1, \"number\": 2 }\r\n    ],\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Booking - Payment Failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get booking - OK (200), Booking Status is Failed\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"status\"]).to.eq(\"Failed\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });\r",
							" setTimeout(function(){}, 5000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings/{{bookingId}}",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Check Balance  - 1000 RUB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance - OK (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.balance).to.eq(1000);\r",
							"    pm.expect(jsonData.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-account",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Cancel 1st Booking (3000 RUB) - Failure (Invalid Status)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Cancel booking -  Precondition Failed (412), Inappropriate booking status\", function () {\r",
							"    pm.response.to.have.status(412);\r",
							"    pm.response.to.have.body(\"Bookings in status 'Succeeded' can only be cancelled.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings/{{bookingId}}",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Deposit Amount (5000 RUB) - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Deposit amount - OK (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": 5000,\r\n    \"currency\": \"RUB\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/deposit-amount",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"deposit-amount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Deposit Amount (5000 RUB) - Failure",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Deposit amount - Bad Request (400)\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": 5000,\r\n    \"currency\": \"USD\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/deposit-amount",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"deposit-amount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Check Balance - 6000 RUB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance - OK (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.balance).to.eq(6000);\r",
							"    pm.expect(jsonData.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-account",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get User Transactions - 2 Deposits Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check two user transactions exist - OK (200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.length).to.eq(2);\r",
							"\r",
							"    var transaction = jsonData[0];\r",
							"    pm.expect(transaction.type).to.eq(\"Deposit\");\r",
							"    pm.expect(transaction.amount).to.eq(1000);\r",
							"    pm.expect(transaction.currency).to.eq(\"RUB\");\r",
							"\r",
							"    var transaction = jsonData[1];\r",
							"    pm.expect(transaction.type).to.eq(\"Deposit\");\r",
							"    pm.expect(transaction.amount).to.eq(5000);\r",
							"    pm.expect(transaction.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-transactions",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Make 2nd Booking (3000 RUB) - In Budget",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Make booking - Created (201), Booking Status is Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"status\"]).to.eq(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });\r",
							"pm.collectionVariables.set(\"bookingId\", pm.variables.replaceIn('{{$guid}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{bookingId}}\",\r\n    \"showId\": 1,\r\n    \"sessionDate\": \"2021-06-06T18:00:00\",\r\n    \"seats\": [\r\n        { \"row\": 1, \"number\": 1 },\r\n        { \"row\": 1, \"number\": 2 }\r\n    ],\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Booking - Payment Succeeded",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get booking - OK (200), Booking Status is Succeeded\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"status\"]).to.eq(\"Succeeded\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });\r",
							" setTimeout(function(){}, 5000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings/{{bookingId}}",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Check Balance - 3000 RUB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance - OK (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.balance).to.eq(3000);\r",
							"    pm.expect(jsonData.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-account",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Make 3rd Booking (3000 RUB) - Failure (Idempotency))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Make booking - Conflict (409)\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.have.body(\"Booking '\" + pm.collectionVariables.get(\"bookingId\") + \"' already exists.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{bookingId}}\",\r\n    \"showId\": 1,\r\n    \"sessionDate\": \"2021-06-06T18:00:00\",\r\n    \"seats\": [\r\n        { \"row\": 1, \"number\": 1 },\r\n        { \"row\": 1, \"number\": 2 }\r\n    ],\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Make 4th Booking (3000 RUB) - Failed (Booked)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Make booking - Conflict (409)\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.have.body(\"Seat is already booked.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });\r",
							"pm.collectionVariables.set(\"bookingId\", pm.variables.replaceIn('{{$guid}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{bookingId}}\",\r\n    \"showId\": 1,\r\n    \"sessionDate\": \"2021-06-06T18:00:00\",\r\n    \"seats\": [\r\n        { \"row\": 1, \"number\": 1 }\r\n    ],\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get User Transactions - Three Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check three user transactions exist - OK (200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.length).to.eq(3);\r",
							"\r",
							"    var transaction = jsonData[2];\r",
							"    pm.expect(transaction.type).to.eq(\"Withdrawal\");\r",
							"    pm.expect(transaction.amount).to.eq(3000);\r",
							"    pm.expect(transaction.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") }); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-transactions",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Make 5th Booking (3000 RUB) - In Budget",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Make booking - Created (201), Booking Status is Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"status\"]).to.eq(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") }); \r",
							"pm.collectionVariables.set(\"bookingId\", pm.variables.replaceIn('{{$guid}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{bookingId}}\",\r\n    \"showId\": 1,\r\n    \"sessionDate\": \"2021-06-06T18:00:00\",\r\n    \"seats\": [\r\n        { \"row\": 1, \"number\": 3 },\r\n        { \"row\": 1, \"number\": 4 }\r\n    ],\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Booking - Payment Succeeded",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get booking - OK (200), Booking Status is Succeeded\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"status\"]).to.eq(\"Succeeded\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });\r",
							" setTimeout(function(){}, 5000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings/{{bookingId}}",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get User Bookings - Three Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check three user bookings exist - OK (200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Get User Transactions - Four Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check four user transactions exist - OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-transactions",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Check Balance - 0 RUB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance iz sero - OK (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.balance).to.eq(0);\r",
							"    pm.expect(jsonData.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-account",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Cancel 5th Booking (3000 RUB) - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Cancel booking -  No Content (204)\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings/{{bookingId}}",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Booking - Cancelled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get booking - OK (200), Booking Status is Cancelled\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"status\"]).to.eq(\"Cancelled\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });\r",
							" setTimeout(function(){}, 5000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings/{{bookingId}}",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Check Balance - 0 RUB Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance - OK (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.balance).to.eq(3000);\r",
							"    pm.expect(jsonData.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-account",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Make 6th Booking (3000 RUB) - In Budget",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Make booking - Created (201), Booking Status is Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"status\"]).to.eq(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") }); \r",
							"pm.collectionVariables.set(\"bookingId\", pm.variables.replaceIn('{{$guid}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{bookingId}}\",\r\n    \"showId\": 1,\r\n    \"sessionDate\": \"2021-06-06T18:00:00\",\r\n    \"seats\": [\r\n        { \"row\": 1, \"number\": 3 },\r\n        { \"row\": 1, \"number\": 4 }\r\n    ],\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payments - Check Balance - 0 RUB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check account balance iz sero - OK (200)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.balance).to.eq(0);\r",
							"    pm.expect(jsonData.currency).to.eq(\"RUB\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{PaymentEndpoint}}/user-account",
					"host": [
						"{{BaseUrl}}{{PaymentEndpoint}}"
					],
					"path": [
						"user-account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get Booking - Payment Succeeded",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get booking - OK (200), Booking Status is Succeeded\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[\"status\"]).to.eq(\"Succeeded\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							" pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });\r",
							" setTimeout(function(){}, 5000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings/{{bookingId}}",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bookings - Get User Bookings - Four Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check four user bookings exist - OK (200)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eq(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.add({ key: 'SessionId', value: pm.collectionVariables.get(\"SessionId\") });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}{{BookingEndpoint}}/user-bookings",
					"host": [
						"{{BaseUrl}}{{BookingEndpoint}}"
					],
					"path": [
						"user-bookings"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "http://arch.coursework"
		},
		{
			"key": "TimetableEndpoint",
			"value": "/timetable-endpoint"
		},
		{
			"key": "BookingEndpoint",
			"value": "/booking-endpoint"
		},
		{
			"key": "PaymentEndpoint",
			"value": "/payment-endpoint"
		},
		{
			"key": "NotificationEndpoint",
			"value": "/notifier-endpoint"
		},
		{
			"key": "UserEndpoint",
			"value": "/user-endpoint"
		},
		{
			"key": "AuthEndpoint",
			"value": "/auth-endpoint"
		},
		{
			"key": "SessionEndpoint",
			"value": "/session-endpoint"
		},
		{
			"key": "IdentityEndpoint",
			"value": "/identity-endpoint"
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "SessionId",
			"value": ""
		},
		{
			"key": "FirstUserId",
			"value": ""
		},
		{
			"key": "X-Service-Token-Session",
			"value": "fbfdf612-841f-4643-a21d-709b1b48c2be"
		},
		{
			"key": "X-Service-Token-User",
			"value": "bb453189-29cc-4ea9-a77d-03b6113f6833"
		},
		{
			"key": "X-Service-Token-Identity",
			"value": "8ca51624-9291-4d70-ab17-08a6178eaabf"
		},
		{
			"key": "bookingId",
			"value": ""
		}
	]
}