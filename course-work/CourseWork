Описаться модель для лабы про consistency
UML - sequence diagram
Срипт создания топиков
Написать взаимодействие для Users / Payment Acccounts
Развернуть Kafka в Kubernetes
Продукмать-описать сообщения

UserService
 - создание пользователя, отправка сообщение в PaymentService - event collaboration

Пройти курс по Kafka
Настройки Kafka вынести в конфиг

Использовать enums вместо строк

Реелизовать методы:
	- Notification Service
		- получение всех нотификаций
		- получение нотификации по ID - ?
	- Payment  Service
		- получение всех платежей
		- получение платежа по ID - ?
		- пополнения счёта
		- снятия денег
		- создание счёта пользователя

X-Authentication в REST и обработке событий / команд
Прикрутить аутентификацию
Прикрутить мониторинг

Нарисовать граф переходов состояний для саги
Обновить схему для системы

Выбирать доступные места с учётом статусов бронирований

Bookings - меньше статусов: Created, Pending, Confirmed, Rejected.


Saga Logic
1) Booking Service:
   - generates BookingId (for idempotency)
   - creates BookingSaga (passing Order / Order Data to it)
   - fires BookingCreated
   - Order Id is returned to the client
2) BookingSagaProcessor listens to BookingCreated
BookingService creates BookingSaga
BookingSaga then creates the corresponding Booking.
BookingSage then orchestrates the process and updates the Booking accordingly.

BookingSaga
BookingSagaData

В BookSession добавить Email.
BookingProcessor - удалять "брошенные" бронирования.
Валидация, что запрошены существующие в схеме места 
Конкурентность бронирования
Семантическая блокировка - добавить возможность отмены пользователем
Использовать разные Group Id
Удаление подвисших бронирований
Реализовать типизированную обработку сообщений
Настроить только обработу only once (одним слушателем)
Посмотреть примеры
Разобраться, как передавать JSON-сообщения
Сериализация-десериализация
Продумать формат сообщений
Создать сборку с контрактами (либо свои контракты в каждом сервисе)

Описать логику работы саги
 - шаги
 - состояния
 - переходы

Topics:
 - booking-messages
   -- BookingService (via BookingProducer) sends BookingCreated
   -- BookingService.BookingProcessor listens to BookingCreated, when received, and performs seats Availability Validation
 - booking-replies
   -- BookingService.BookingProcessor depending on Availability Valdation result:
      -- in case of AvailabilityConfirmed it persists its state and sends MakePayment to payment-commands (via PaymentProducer) 
	  -- in case of AvailabilityDenied it persists its state, changes booking state to Rejected (performs RejectBooking operation) and sends NotifyBookingFailure with the reason AvailabilityDenied to notification-commands (via NotificationProducer)
 
 - payment-messages
   -- BookingService.BookingProcessor (via PaymentProducer) sends MakePayment
 - payment-replies
   -- PaymentService (via PaymentReplyProducer) sends PaymentSucceeded or PaymentFailed
   -- BookingService.BookingProcessor listens to PaymentSucceeded or PaymentFailed
      -- in case of PaymentSucceeded it persists its state and sends NotifyBookingSuccess to notification-commands (via NotificationProducer)
	  -- in case of PaymentFailed it persists its state, changes booking state to Rejected  (performs RejectBooking operation) and sends NotifyBookingFailure with the reason of PaymentFailure to notification-commands (via NotificationProducer)

 - notification-commands
   -- BookingService.BookingProcessor (via NotificationProducer) sends NotifyBookingSuccess or NotifyBookingFailure
 - notification-replies
   -- NotificationService (мшф NotificationReplyProducer) sends BookingSuccessNotified or BookingFailureNotified


CreateBooking
{
	"Id" : "<GUID>",
	"Type" : "Command",
	"Name" : "CreateBooking",
	"Date" : "<DateTime>",
	"Body" :
	{
		"BookingId" : "<GUID>",
		"ShowId" : "...",
	}
}

UserCreated
{
	"Id" : "<GUID>",
	"Type" : "Event",
	"Name" : "UserCreated",
	"Date" : "<DateTime>"
	"Body" :
	{
		"UserId" : "<Int32>",
		"Email" : "<String>"
	}
}



zookeeper-server-start.bat c:\Kafka\config\zookeeper.properties
kafka-server-start.bat c:\Kafka\config\server.properties

kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic bookings
kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic payment-messages