Презентация
 - ввести актуальные SMTP-настройки
 - использовать личный email
 - посмотреть пример
 - описать события / команды
 - обновить схему взаимодействия сервисов
 - подключение к SQL
 - подготовить выступление


 - Сага с оркестрацией
 - проверка существования Booking Id при создании - идемпотентность
 - идемпотентность в саге
 - проверка существования Booking при подтверждении
 - обрабатывается, если параметры в запросе указаны некорректно (шоу, время сеанса)
 - семантическая блокировка
 - REST-взаимодействия через коннекторы
 - допущение - стоимость билетов зависит только от сеанса, не зависит от места
 - допущение - нет администраторской части
 - Kafka Message: Event, Command
 - booking service разделён на публичную (доступные места) и приватную части (получение бронирования пользователя)
 - в Sign In вычищается предыдущая сессия (например, от чужого пользователя) и также предварительно очищаются все сессии пользователя который логинится
 - показать структуру проекта
 - идепотентность и конкурентность бронирования обеспечивается на уровне DB-транзакций (isolation level - serialaizable)
 - нарисовать схему БД

Раписать стек, фреймворки
Стейт-машина для саги
Kafka
Kubernetes / docker
MS SQL Express (версия)
Helm
Nginx

API
Gateway
Sessions
Ingress
Idempotency
S2S Authorization
Saga - распределённая транзакция

Валидации параметров, в бронировании - 

Иерархия команд и сообщений, автоматическиая просталения Id, времени.
Компонент дkя сериализации / десериализации

Показать структуру приложения
Еоннекторы
Хэдер вместо куки

Депозиты и оплаты - платёжные транзации

Идемпотетность бронирования - естественный ключ идепотентности (booking Id).
Конкурентность бронирования 

Нарисовать позитивный сценарий

Попробовать отпрвить письмо

Показать решение, развёрнутое в minikube
Показываем отправку запросов в Postman

Написать Стасу
Поиграться с Zoom